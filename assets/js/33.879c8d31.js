(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{552:function(a,t,e){a.exports=e.p+"assets/img/50f89510ad1f7570791dd12f4e9adeb4.50f89510.jpg"},553:function(a,t,e){a.exports=e.p+"assets/img/14eaa820cb89a17a7303e8847a412330.14eaa820.jpg"},685:function(a,t,e){"use strict";e.r(t);var s=e(26),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tree"}},[a._v("#")]),a._v(" tree")]),a._v(" "),s("h2",{attrs:{id:"concept"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concept"}},[a._v("#")]),a._v(" concept"),s("br")]),a._v(" "),s("p",[s("img",{attrs:{src:e(552),alt:"height-depth-layer"}})]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1. 生活中，“高度”这个概念，其实就是从下往上度量，比如我们要度量第 10 层楼的高度，起点是地面。所以，树这种数据结构的高度也是一样，从最底层开始计数，并且计数的起点是 0。\n2. “深度”这个概念在生活中是从上往下度量的，比如水中鱼的深度，是从水平面开始度量的。所以，树这种数据结构的深度也是类似的，从根结点开始度量，并且计数起点也是 0。\n3 “层数”跟深度的计算类似，不过，计数起点是 1，也就是说根节点的位于第 1 层。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("h2",{attrs:{id:"二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[a._v("#")]),a._v(" 二叉树")]),a._v(" "),s("ul",[s("li",[a._v("最大节点数目为2"),s("sup",[a._v("k")]),a._v(" - 1，这个和长度为k的整数的最大值一样，因为都符合二进制多项式")])]),a._v(" "),s("h3",{attrs:{id:"存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储"}},[a._v("#")]),a._v(" 存储")]),a._v(" "),s("ul",[s("li",[a._v("数组，比如完全二叉树由于其结构上的特点，通常采用顺序存储方式存储。一棵有n个结点的完全二叉树的所有结点从1到n编号，就得到结点的一个线性系列。"),s("br"),a._v(" "),s("img",{attrs:{src:e(553),alt:"array-tree"}}),s("br")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1. 完全二叉树的树的编号，刚好填满对应的整数空间，证明的话，可以根据二项式来算\n2. 二项式最左边的查找边对应2的幂序列\n3. 存储的局部三角形关系(i为下标)： 2i -> 2i + 1 -> 2i + 2\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("ul",[s("li",[a._v("二叉链表")]),a._v(" "),s("li",[a._v("三叉链表")])]),a._v(" "),s("h3",{attrs:{id:"满二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#满二叉树"}},[a._v("#")]),a._v(" 满二叉树")]),a._v(" "),s("ul",[s("li",[a._v("不同的定义： "),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8F%89%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[a._v("中文语境下的满二叉树"),s("OutboundLink")],1),a._v(", "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Binary_tree",target:"_blank",rel:"noopener noreferrer"}},[a._v("另一种解释"),s("OutboundLink")],1)]),a._v(" "),s("li",[a._v("一种说法是： 每一层上的节点数都是最大节点数；另一种说法是：每个节点都有0或者2个节点，即不存在只有一个子节点的节点就行")])]),a._v(" "),s("h3",{attrs:{id:"完全二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完全二叉树"}},[a._v("#")]),a._v(" 完全二叉树")]),a._v(" "),s("ul",[s("li",[a._v("在一颗二叉树中，若除最后一层外的其余层都是满的，并且最后一层要么是满的，要么在右边缺少连续若干节点，则此二叉树为完全二叉树（Complete Binary Tree）")]),a._v(" "),s("li",[a._v('如果某棵二叉树是一棵完全二叉树，那用数组存储时最省内存的一种方式；所以完全二叉树和使用数组存储是紧密相关的概念，可以认为，使用数组进行"紧密"存储的二叉树是完全二叉树')])]),a._v(" "),s("h3",{attrs:{id:"平衡二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树"}},[a._v("#")]),a._v(" 平衡二叉树")]),a._v(" "),s("ul",[s("li",[a._v("每个节点的左右子树的高度相差不大于1")])]),a._v(" "),s("h3",{attrs:{id:"二叉查询树-binary-search-tree-bst"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉查询树-binary-search-tree-bst"}},[a._v("#")]),a._v(" 二叉查询树(Binary Search Tree, BST)")]),a._v(" "),s("ul",[s("li",[a._v("左子数上所有的节点都比自己的小，而右子数上所有的节点都比自己大这一条件")])]),a._v(" "),s("h3",{attrs:{id:"遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[a._v("#")]),a._v(" 遍历")]),a._v(" "),s("ul",[s("li",[a._v("对于二叉树的遍历，经典的方法有三种：前序遍历、中序遍历和后序遍历。其中，前、中、后序，表示的是节点与它的左右子树节点遍历打印的先后顺序")])]),a._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("前序遍历是指，对于树中的任意节点来说，先打印这个节点，然后再打印它的左子树，最后打印它的右子树。\n中序遍历是指，对于树中的任意节点来说，先打印它的左子树，然后再打印这个节点，最后打印它的右子树。\n后序遍历是指，对于树中的任意节点来说，先打印它的左子树，然后再打印它的右子树，最后打印这个节点。\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);