(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{374:function(s,t,e){s.exports=e.p+"assets/img/v2-7d484b599556327b14d1a9695fb5c15c_720w.7d484b59.jpg"},625:function(s,t,e){"use strict";e.r(t);var a=e(26),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"语言虚拟机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语言虚拟机"}},[s._v("#")]),s._v(" 语言虚拟机")]),s._v(" "),a("h2",{attrs:{id:"jvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[s._v("#")]),s._v(" JVM")]),s._v(" "),a("ul",[a("li",[s._v("java vm")]),s._v(" "),a("li",[s._v("屏蔽了与具体平台相关的信息，使Java语言编译程序只需要生成在JVM上运行的目标字节码（.class）,就可以在多种平台上不加修改地运行。Java 虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。因此实现java平台无关性。")])]),s._v(" "),a("h2",{attrs:{id:"pvm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pvm"}},[s._v("#")]),s._v(" PVM")]),s._v(" "),a("ul",[a("li",[s._v("python vm")]),s._v(" "),a("li",[s._v("将源码编译成运行在虚拟机上执行的opcode(pyc文件)，pyc文件是在python虚拟机上执行的一种跨平台字节码。")]),s._v(" "),a("li",[a("img",{attrs:{src:e(374),alt:"image"}})]),s._v(" "),a("li",[s._v("Actually, all the things that VM do is simulating what the OS do to excute a program.")]),s._v(" "),a("li",[s._v("In Python, there is a class to describe the envrionment at running time – PyFrameObject. It’s a simulation of stack frame in x86 platform. Bytecode is not designed to be executed by the processor directly, but rather by another program. It is most commonly used by a software based interpreter like Java or CLR. They convert each generalized machine instruction into a specific machine instruction or instructions so that the computer's processor will understand.")]),s._v(" "),a("li")]),s._v(" "),a("h2",{attrs:{id:"php-vm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php-vm"}},[s._v("#")]),s._v(" PHP VM")]),s._v(" "),a("ul",[a("li",[s._v("Zend(PHP公司) 虚拟机")]),s._v(" "),a("li",[s._v("_zend_vm_stack")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<?php\n$i = 1;\n$j = 2;\necho $i + $j;\n\necho \"hello world!\";\n----------------------------------------------------------------------------------\n--需要安装vld扩展\nphp -dvld.active=1 t.php                \nFinding entry points\nBranch analysis from position: 0\n1 jumps found. (Code = 62) Position 1 = -2\nfilename:       /home/sandstone/t.php\nfunction name:  (null)\nnumber of ops:  10\ncompiled vars:  !0 = $i, !1 = $j\nline     #* E I O op                           fetch          ext  return  operands\n-------------------------------------------------------------------------------------\n   2     0  E >   EXT_STMT                                                 \n         1        ASSIGN                                                   !0, 1\n   3     2        EXT_STMT                                                 \n         3        ASSIGN                                                   !1, 2\n   4     4        EXT_STMT                                                 \n         5        ADD                                              ~4      !0, !1\n         6        ECHO                                                     ~4\n   6     7        EXT_STMT                                                 \n         8        ECHO                                                     'hello+world%21'\n   7     9      > RETURN                                                   1\n\nbranch: #  0; line:     2-    7; sop:     0; eop:     9; out0:  -2\npath #1: 0, \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("h2",{attrs:{id:"opcode-vs-bytecode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#opcode-vs-bytecode"}},[s._v("#")]),s._v(" OpCode vs ByteCode")]),s._v(" "),a("ul",[a("li",[s._v("ByteCode: the name bytecode comes from instruction sets that have one-byte opcodes followed by optional parameters.")]),s._v(" "),a("li",[s._v("OpCode: operation code; As its name suggests, the opcode is a type of code that tells the machine what to do, i.e. what operation to perform.")]),s._v(" "),a("li",[s._v("大概理解是这样的：ByteCode是java 虚拟机使用的中间代码层；而Opcode可以指汇编的代码，也用来指脚本语言python、php等的中间代码，具有两重含义。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);