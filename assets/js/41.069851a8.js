(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{408:function(s,e,a){s.exports=a.p+"assets/img/docker-ip.5922ebc2.png"},643:function(s,e,a){"use strict";a.r(e);var n=a(26),r=Object(n.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"docker"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[s._v("#")]),s._v(" DOCKER")]),s._v(" "),n("h2",{attrs:{id:"基础原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基础原理"}},[s._v("#")]),s._v(" 基础原理")]),s._v(" "),n("ul",[n("li",[s._v("CGROUP(control groups): 处理进程使用宿主资源的数量或者规模的问题")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(" Cgroups allow you to allocate resources — such as CPU time, system memory, network bandwidth, or combinations of these resources — among user-defined groups of tasks (processes) running on a system. \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("namespace: 为了让进程之间进行隔离")]),s._v(" "),n("li",[s._v("UnionFS: 用于做分层、镜像复用、COW")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("unionFS可以把文件系统上多个目录(也叫分支)内容联合挂载到同一个目录下，而目录的物理位置是分开的。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("container(Linux container, LXC): 容器技术的进一步发展，微服务发展的一种技术演进；与传统的虚拟化相比更加的轻量化，更加迅速，虚拟化是一种OS级别的，容器则是应用级别的")]),s._v(" "),n("li",[s._v("veth pair 网卡管道，工程化的形象，就像热水水管一样流动数据")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Linux container 中用到一个叫做veth的东西，这是一种新的设备，专门为 container 所建。veth 从名字上来看是 Virtual ETHernet 的缩写，它的作用很简单，就是要把从一个 network namespace 发出的数据包转发到另一个 namespace。veth 设备是成对的，一个是 container 之中，另一个在 container 之外，即在真实机器上能看到的。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"namespace"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#namespace"}},[s._v("#")]),s._v(" namespace")]),s._v(" "),n("ul",[n("li",[s._v("实践")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("NS_NAME=ue-testing\nip netns add $NS_NAME\nip netns exec $NS_NAME ifconfig\nip netns exec $NS_NAME bash 可以进入另一个命名空间执行命令\nip netns list 查看命名空间\nip netns delete $NS_NAME\nethtool -k br-01612ab26dea | grep netns        \nnetns-local: on [fixed] (表示不能转移)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h4",{attrs:{id:"veth-设备对"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#veth-设备对"}},[s._v("#")]),s._v(" veth 设备对")]),s._v(" "),n("ul",[n("li",[s._v("增加设备对 ip link add veth0 type veth peer name veth1")]),s._v(" "),n("li",[s._v("将veth1迁移到另外的命名空间")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ip netns add ns-ue-veth-testing \nip link set veth1 netns ns-ue-veth-testing\nip netns exec ns-ue-veth-testing ip link show，可以看到veth1已经移动到了ns-ue-veth-testing\n    ```\n    1: lo: <LOOPBACK> mtu 65536 qdisc noop state DOWN mode DEFAULT group default qlen 1000\n        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    71774: veth1@if71775: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000\n        link/ether e6:05:1f:08:10:0c brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    ```\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("ul",[n("li",[s._v("现在在veth对就连接了宿主机和ns-ue-veth-testing两个命名空间")]),s._v(" "),n("li",[s._v("绑定ip地址并且启动")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ip netns exec ns-ue-veth-testing  ip addr add 10.10.1.1/24 dev veth1\nip addr add 10.10.1.2/24 dev veth0 \nip netns exec ue-veth-testing ip link set dev eth1 up \nip link set dev veth0 up\nping 10.10.1.1                        \n    PING 10.10.1.1 (10.10.1.1) 56(84) bytes of data.\n    64 bytes from 10.10.1.1: icmp_seq=1 ttl=64 time=0.038 ms\n    64 bytes from 10.10.1.1: icmp_seq=2 ttl=64 time=0.034 ms\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("ul",[n("li",[s._v("查看类型")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("> ethtool -i veth0                               \ndriver: veth\nversion: 1.0\nfirmware-version: \nexpansion-rom-version: \nbus-info: \nsupports-statistics: yes\nsupports-test: no\nsupports-eeprom-access: no\nsupports-register-dump: no\nsupports-priv-flags: no\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[s._v("查看设备索引")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ethtool -S  veth0\nNIC statistics:\n     peer_ifindex: 71774 (在不同的命名空间下，该值一致，也可以通过ip link查看)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("删除命名空间的时候，会自动删除绑定的veth设备")]),s._v(" "),n("li",[s._v("结构图\n"),n("img",{attrs:{src:a(408),alt:"docker-ip"}})])]),s._v(" "),n("h3",{attrs:{id:"bridge"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bridge"}},[s._v("#")]),s._v(" bridge")]),s._v(" "),n("ul",[n("li",[s._v("安装brctl yum install bridge-utils")]),s._v(" "),n("li",[s._v("查看 brctl show")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("bridge name     bridge id               STP enabled     interfaces\nbr-01612ab26dea         8000.0242ef8b5c10       no\nbr-b6a063283195         8000.024235a22119       no\ndocker0         8000.02425b3f82a3       no\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("brctl addbr br-ue; ifconfig -a")]),s._v(" "),n("li",[s._v("删除: ifconfig br-ue down; brctl delbr br-ue")])]),s._v(" "),n("h3",{attrs:{id:"route"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#route"}},[s._v("#")]),s._v(" route")]),s._v(" "),n("ul",[n("li",[s._v("ip route list")]),s._v(" "),n("li",[s._v("netstat -rn")])]),s._v(" "),n("h3",{attrs:{id:"网络心得"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#网络心得"}},[s._v("#")]),s._v(" 网络心得")]),s._v(" "),n("ul",[n("li",[s._v("通过bridge、 route、 iptables、veth等将容器、主机连接起来，形成一个网络")])]),s._v(" "),n("h2",{attrs:{id:"测试-开发环境中安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试-开发环境中安装"}},[s._v("#")]),s._v(" 测试&开发环境中安装")]),s._v(" "),n("ul",[n("li",[s._v("curl -fsSL get.docker.com -o get-docker.sh")]),s._v(" "),n("li",[s._v("sudo sh get-docker.sh --mirror Aliyun")])]),s._v(" "),n("h2",{attrs:{id:"启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启动"}},[s._v("#")]),s._v(" 启动")]),s._v(" "),n("ul",[n("li",[s._v("sudo systemctl enable docker")]),s._v(" "),n("li",[s._v("sudo systemctl start docker")]),s._v(" "),n("li",[s._v("关于创建用户组&用户")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("默认情况下， docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker用户组。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("sudo groupadd docker")]),s._v(" "),n("li",[s._v("sudo usermod -aG docker $USER("),n("strong",[s._v("将当前用户加入到用户组")]),s._v(")")]),s._v(" "),n("li",[s._v("测试是否安装正常, docker run hello-world")]),s._v(" "),n("li",[s._v("简单nginx服务器")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("docker run -d -p 80:80 --name webserver nginx\nhttp://localhost\ndocker stop webserver\ndocker rm webserver\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"镜像管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#镜像管理"}},[s._v("#")]),s._v(" 镜像管理")]),s._v(" "),n("ul",[n("li",[s._v("centos 镜像加速, /etc/docker/daemon.json(没有则创建)")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('{\n    "registry-mirrors": [\n        "https://registry.docker-cn.com"\n    ]\n}\n重启服务\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("ul",[n("li",[s._v("git hub vs docker hub， 通过URI来定位具体资源的位置")]),s._v(" "),n("li",[s._v("获取镜像的命令格式 docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签] , 默认地址是docker hub， 默认仓库为library")]),s._v(" "),n("li",[s._v("docker pull ubuntu:16.04;   docker run -it --rm ubuntu:16.04 bash")]),s._v(" "),n("li",[s._v("docker inspect imageId 查看镜像的信息")])]),s._v(" "),n("h3",{attrs:{id:"list"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" list")]),s._v(" "),n("ul",[n("li",[s._v("docker image ls(只显示顶层镜像), 镜像 ID 则是镜像的唯一标识，一个镜像可以对应多个标签")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("REPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nnginx         latest    d1a364dc548d   3 weeks ago    133MB\nubuntu        16.04     9ff95a467e45   4 weeks ago    135MB\nhello-world   latest    d1165f221234   3 months ago   13.3kB\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("options")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v(' docker image ls -f dangling=true，显示虚悬镜像； docker image prune删除虚悬镜像\n docker image ls -a 显示所有镜像，包括中间层镜像\n docker image ls ubuntu, docker image ls ubuntu:16.04\n docker image ls -f since=mongo:3.2, docker image ls -f before=mongo:3.2\n docker image ls --format "table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}"\n docker image ls --format "{{.ID}}: {{.Repository}}"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"rm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rm"}},[s._v("#")]),s._v(" rm")]),s._v(" "),n("ul",[n("li",[s._v("docker image rm [选项] <镜像1> [<镜像2> ...], 其中， <镜像> 可以是 镜像短 ID 、 镜像长 ID 、 镜像名 或者 镜像摘要")]),s._v(" "),n("li",[s._v("docker image rm 501(使用短id)")]),s._v(" "),n("li",[s._v("docker image rm centos(使用镜像名)")]),s._v(" "),n("li",[s._v("不会触发真正删除的情况： (1) 有使用该镜像的容器在运行(2)有其他镜像依赖(3)有其他标签指向该镜像")]),s._v(" "),n("li",[s._v("删除行为分为两种：Untagged, Deleted；在执行删除镜像命令的时候，实际上是删除某个标签的镜像，如果没有标签执行该镜像，才会触发delete行为")]),s._v(" "),n("li",[s._v("配合ls")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("docker image rm $(docker image ls -q redis)\ndocker image rm $(docker image ls -q -f before=mongo:3.2)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("docker image rm name:version; 删除tag")]),s._v(" "),n("li",[s._v("删除镜像和删除tag是不同的")])]),s._v(" "),n("h3",{attrs:{id:"commit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[s._v("#")]),s._v(" commit")]),s._v(" "),n("ul",[n("li",[s._v("从容器中创建一个镜像")]),s._v(" "),n("li",[s._v("docker run --name webserver -d -p 80:80 nginx")]),s._v(" "),n("li",[s._v("docker exec -it webserver bash\n"),n("ul",[n("li",[s._v("echo '<h1>Hello, Docker!"),s._v("' > /usr/share/nginx/html/index.html")]),s._v(" "),n("li",[s._v("exit")])])]),s._v(" "),n("li",[s._v('docker commit --author "Bin Wang'),n("a",{attrs:{href:"mailto:bin.wang@capstones.cn"}},[s._v("bin.wang@capstones.cn")]),s._v('" --message "change nginx default page" webserver nginx:v-capstone')]),s._v(" "),n("li",[s._v("docker image ls")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("REPOSITORY    TAG          IMAGE ID       CREATED              SIZE\nnginx         v-capstone   a89b5d375ace   About a minute ago   133MB\nnginx         latest       d1a364dc548d   3 weeks ago          133MB\nubuntu        16.04        9ff95a467e45   4 weeks ago          135MB\nhello-world   latest       d1165f221234   3 months ago         13.3kB\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("docker history nginx:v-capstone")])]),s._v(" "),n("h3",{attrs:{id:"run"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run"}},[s._v("#")]),s._v(" run")]),s._v(" "),n("ul",[n("li",[s._v("所有的参数都在镜像id的前面")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("docker run -it -v /data/cuser00/var/log/redis:/logs -v /data/cuser00/var/redis:/data -v `pwd`/redis/redis.conf:/usr/local/etc/redis/redis.conf   redis:6.2.3  /bin/bash\n\n挂载文件，提供外部动态执行能力\ndocker run -it --rm  -v /data/cuser00/sand/docker/jekins/static/run.sh:/static/run.sh  php-static:1.0.0  sh /static/run.sh hotfix_wb_docker_apply \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"dockerfile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[s._v("#")]),s._v(" Dockerfile")]),s._v(" "),n("ul",[n("li",[s._v("Dockerfile 中每一个指令都会建立一层")])]),s._v(" "),n("h3",{attrs:{id:"docker-build"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-build"}},[s._v("#")]),s._v(" docker build")]),s._v(" "),n("ul",[n("li",[s._v("Docker 在运行时分为 Docker 引擎（也就是服务端守护进程）和客户端工具。Docker 的引擎提供了一组 REST API，被称为 DockerRemote API，而如 docker命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。因此，虽然表面上我们好像是在本机执行各种 docker功能，但实际上，一切都是使用的远程调用形式在服务端（Docker引擎）完成。也为这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。")]),s._v(" "),n("li",[s._v("如果目录下有些东西确实不希望构建时传给 Docker 引擎，那么可以用 .gitignore 一样的语法写一个 .dockerignore，该文件是用于剔除不需要作为上下文传递给 Docker 引擎的。")]),s._v(" "),n("li",[s._v("镜像构建上下文，在build的时候，尽量是一个空目录，因为build的时候需要将指定的上下文目录发送到docker引擎")]),s._v(" "),n("li",[s._v("例子, Dockerfile")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("FROM nginx\nRUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("docker build -t nginx:v-cap-2(指定镜像名:标签) .(指定上下文目录)")]),s._v(" "),n("ul",[n("li",[s._v("从标准输入中构建\ncat Dockerfile | docker build -\ndocker build - < Dockerfile\ndocker image ls ，因为没有指定镜像名:标签，生成"),n("none",[s._v("的镜像")])],1)]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("REPOSITORY    TAG          IMAGE ID       CREATED          SIZE\n<none>        <none>       828aa87f4921   5 seconds ago    133MB\nnginx         latest       d1a364dc548d   3 weeks ago      133MB\nubuntu        16.04        9ff95a467e45   4 weeks ago      135MB\nhello-world   latest       d1165f221234   3 months ago     13.3kB\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"directive"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#directive"}},[s._v("#")]),s._v(" directive")]),s._v(" "),n("ul",[n("li",[s._v("FROM")]),s._v(" "),n("li",[s._v("RUN")]),s._v(" "),n("li",[s._v("COPY指令将从构建"),n("strong",[s._v("上下文目录")]),s._v("中 <源路径的文件/目录复制到"),n("strong",[s._v("新的一层的镜像内的<目标路径>")]),s._v(" 位置")]),s._v(" "),n("li",[s._v("ADD,高级的COPY，仅在需要解压缩的时候使用ADD，其他都用COPY")]),s._v(" "),n("li",[s._v("CMD\n"),n("ul",[n("li",[s._v("shell格式: CMD <命令>，比如 "),n("code",[s._v("CMD echo $HOME")])]),s._v(" "),n("li",[s._v('exec格式: CMD ["可执行文件", "参数1", "参数2"...],比如'),n("code",[s._v('CMD [ "sh", "-c", "echo $HOME" ]')])])])]),s._v(" "),n("li",[s._v("ENTRYPOINT 赋予了一种动态将外部参数传入到内部能力，相当于dockerfile的main函数，而main函数是可以接收参数的")]),s._v(" "),n("li",[s._v("ENV 设置环境变量，即dockerfile运行期可以使用的变量")]),s._v(" "),n("li",[s._v("ARG 参数")]),s._v(" "),n("li",[s._v("VOLUME 定义匿名卷， 指定外部挂载的目录，保证容器存储层的无状态化 docker run -d -v mydata:/data xxxx,可以通过参数覆盖原来的VOLUME设置")]),s._v(" "),n("li",[s._v("EXPOSE 声明网络端口")]),s._v(" "),n("li",[s._v("WORKDIR 指定工作目录")]),s._v(" "),n("li",[s._v("USER 指定当前用户,如果以 root 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 su 或者 sudo ，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 gosu。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 建立 redis 用户，并使用 gosu 换另一个用户执行命令\nRUN groupadd -r redis && useradd -r -g redis redis\n# 下载 gosu\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v('RUN wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/1.7/\ngosu-amd64" '),n("br"),s._v("\n&& chmod +x /usr/local/bin/gosu "),n("br"),s._v("\n&& gosu nobody true")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('# 设置 CMD，并以另外的用户执行\nCMD [ "exec", "gosu", "redis", "redis-server" ]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("HEALTHCHECK健康检查")]),s._v(" "),n("li",[s._v("ONBUILD, 一个特殊的指令，它后面跟的是其它指令，比如 RUN , COPY 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。")]),s._v(" "),n("li",[s._v("多阶段构建")])]),s._v(" "),n("h2",{attrs:{id:"docker容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker容器"}},[s._v("#")]),s._v(" Docker容器")]),s._v(" "),n("ul",[n("li",[s._v("Image镜像和容器Container的关系，就像面向对象的类和实例的关系。镜像是静态的，容器则是镜像运行时的实体")]),s._v(" "),n("li",[s._v("Docker 不是虚拟机，容器中的应用都应该以前台执行，而不是像虚拟机、物理机里面那样，用 upstart/systemd 去启动后台服务，容器内没有后台服务的概念。")])]),s._v(" "),n("h3",{attrs:{id:"list-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list-2"}},[s._v("#")]),s._v(" list")]),s._v(" "),n("ul",[n("li",[s._v("docker container ls")]),s._v(" "),n("li",[s._v("docker container ls -a")])]),s._v(" "),n("h3",{attrs:{id:"run-新建并启动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-新建并启动"}},[s._v("#")]),s._v(" run 新建并启动")]),s._v(" "),n("ul",[n("li",[s._v("docker run ubuntu:14.04 /bin/echo 'Hello world'")]),s._v(" "),n("li",[s._v("docker run -t -i ubuntu:14.04 /bin/bash, -t 分配伪终端, -i 则让容器的标准输入保持打开，过程如下:")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("检查本地是否存在指定的镜像，不存在就从公有仓库下载\n利用镜像创建并启动一个容器\n分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\n从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\n从地址池配置一个 ip 地址给容器\n执行用户指定的应用程序\n执行完毕后容器被终止\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"start"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#start"}},[s._v("#")]),s._v(" start")]),s._v(" "),n("ul",[n("li",[s._v("将一个已经终止的容器启动运行")])]),s._v(" "),n("h3",{attrs:{id:"stop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stop"}},[s._v("#")]),s._v(" stop")]),s._v(" "),n("h3",{attrs:{id:"restart"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#restart"}},[s._v("#")]),s._v(" restart")]),s._v(" "),n("h3",{attrs:{id:"后台运行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#后台运行"}},[s._v("#")]),s._v(" 后台运行")]),s._v(" "),n("ul",[n("li",[s._v("-d 加上-d参数")]),s._v(" "),n("li",[s._v("需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下")]),s._v(" "),n("li",[s._v('docker run -d ubuntu:17.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"，可以使用docker container logs查看')])]),s._v(" "),n("h3",{attrs:{id:"sttach"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sttach"}},[s._v("#")]),s._v(" sttach")]),s._v(" "),n("h3",{attrs:{id:"exec"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[s._v("#")]),s._v(" exec")]),s._v(" "),n("ul",[n("li",[s._v("推荐使用")])]),s._v(" "),n("h3",{attrs:{id:"import-export"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#import-export"}},[s._v("#")]),s._v(" import export")]),s._v(" "),n("ul",[n("li",[s._v("导入 导出容器快照")])]),s._v(" "),n("h3",{attrs:{id:"rm-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rm-2"}},[s._v("#")]),s._v(" rm")]),s._v(" "),n("ul",[n("li",[s._v("删除处于终止状态的容器")]),s._v(" "),n("li",[s._v("docker container rm f9af5ee2bbc9 -f 强制删除")])]),s._v(" "),n("h3",{attrs:{id:"prune"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#prune"}},[s._v("#")]),s._v(" prune")]),s._v(" "),n("ul",[n("li",[s._v("docker container prune ，清理已经终止的所有容器")])]),s._v(" "),n("h2",{attrs:{id:"repository"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[s._v("#")]),s._v(" Repository")]),s._v(" "),n("ul",[n("li",[s._v("Registry 是服务器，每个服务器下面可以有多个仓库；而每个仓库下面可以有多个镜像")]),s._v(" "),n("li",[s._v("docker search centos")])]),s._v(" "),n("h2",{attrs:{id:"docker-registry"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#docker-registry"}},[s._v("#")]),s._v(" Docker Registry")]),s._v(" "),n("ul",[n("li",[s._v("存储、分发镜像的服务")])]),s._v(" "),n("h2",{attrs:{id:"数据管理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数据管理"}},[s._v("#")]),s._v(" 数据管理")]),s._v(" "),n("h3",{attrs:{id:"使用数据卷"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用数据卷"}},[s._v("#")]),s._v(" 使用数据卷")]),s._v(" "),n("ul",[n("li",[s._v("docker volume create my-vol")]),s._v(" "),n("li",[s._v("docker volume ls")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("DRIVER    VOLUME NAME\nlocal     my-vol\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("docker volume inspect my-vol")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('[\n    {\n        "CreatedAt": "2021-06-17T17:13:26+08:00",\n        "Driver": "local",\n        "Labels": {},\n        "Mountpoint": "/var/lib/docker/volumes/my-vol/_data",\n        "Name": "my-vol",\n        "Options": {},\n        "Scope": "local"\n    }\n]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[s._v("启动一个挂载数据卷的容器")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("docker run -d -P \\\n    --name web \\\n    # -v my-vol:/wepapp \\\n    --mount source=my-vol,target=/webapp \\\n    training/webapp \\\n    python app.py\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("docker inspect web")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('"Mounts": [\n    {\n        "Type": "volume",\n        "Name": "my-vol",\n        "Source": "/var/lib/docker/volumes/my-vol/_data",\n        "Destination": "/app",\n        "Driver": "local",\n        "Mode": "",\n        "RW": true,\n        "Propagation": ""\n    }\n],\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ul",[n("li",[s._v("docker volume rm my-vol")]),s._v(" "),n("li",[s._v("docker volume prune")]),s._v(" "),n("li",[s._v("docker system prune 一键清理所有不用的卷、镜像等")])]),s._v(" "),n("h3",{attrs:{id:"挂载主机目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#挂载主机目录"}},[s._v("#")]),s._v(" 挂载主机目录")]),s._v(" "),n("ul",[n("li",[s._v("镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。"),n("strong",[s._v("容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡")])]),s._v(" "),n("li",[s._v("挂载目录使用的都是root权限，但是执行使用的其他用户")]),s._v(" "),n("li",[s._v("命令")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("docker run -d -P \\\n    --name web \\\n    # -v /src/webapp:/opt/webapp \\\n    --mount type=bind,source=/src/webapp,target=/opt/webapp \\\n    training/webapp \\\n    python app.py\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("格式2")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("docker run -d -P \\\n    --name web \\\n    # -v /src/webapp:/opt/webapp:ro \\\n    --mount type=bind,source=/src/webapp,target=/opt/webapp,readonly \\\n    training/webapp \\\n    python app.py\n\n挂载多个目录使用多个-v参数\ndocker run -it -v /data/cuser00/var/log/redis:/logs -v /data/cuser00/var/redis:/data -v `pwd`/redis/redis.conf:/usr/local/etc/redis/redis.conf   redis:6.2.3  /bin/bash\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("ul",[n("li",[s._v("docker inspect web")]),s._v(" "),n("li",[s._v("挂载单个文件")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("docker run --rm -it \\\n    --mount type=bind,source=$HOME/.bash_history,target=/root/.bash_history \\\n    ubuntu:17.10 \\\n    bash\nroot@2affd44b4667:/# history\n1 ls\n2 diskutil list\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("挂载目录")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("docker run -it -v /data/cuser00/var/nginx/:/data nginx:1.18 /bin/bash\n注意: 将所有的配置项写在前部，后面是镜像和命令\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"使用网络"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用网络"}},[s._v("#")]),s._v(" 使用网络")]),s._v(" "),n("ul",[n("li",[s._v("使用-P， Docker 会随机映射一个 49000~49900 的端口到内部容器开放的网络端口")]),s._v(" "),n("li",[s._v("ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort, 例子")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    docker run -d -p 5000:5000 training/webapp python app.py\n    docker run -d -p 127.0.0.1::5000 training/webapp python app.py\n    docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py\n    docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py\n    docker run -d \\\n        -p 5000:5000 \\\n        -p 3000:80 \\\n        training/webapp \\\n        python app.py\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("ul",[n("li",[s._v("docker port nostalgic_morse 5000")]),s._v(" "),n("li",[s._v("docker在安装后会默认生成三种网络，none、bridge及host.")]),s._v(" "),n("li",[s._v("查看网络信息 docker network ls")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("NETWORK ID     NAME      DRIVER    SCOPE\n1d2e9d7c9bff   bridge    bridge    local\n349bd72081d1   host      host      local\n2f60f451a8cc   none      null      local\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"compose"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compose"}},[s._v("#")]),s._v(" compose")]),s._v(" "),n("h3",{attrs:{id:"安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("sudo pip install -U docker-compose\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"build"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[s._v("#")]),s._v(" build")]),s._v(" "),n("ul",[n("li",[s._v("build命令，只构建")])]),s._v(" "),n("h3",{attrs:{id:"run-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#run-2"}},[s._v("#")]),s._v(" run")]),s._v(" "),n("ul",[n("li",[s._v("docker-compose run --rm redis")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("--rm 运行结束自动删除容器\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"up"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#up"}},[s._v("#")]),s._v(" up")]),s._v(" "),n("ul",[n("li",[s._v("docker-compose up -d(生产建议使用，调试环境中不使用)")])]),s._v(" "),n("h2",{attrs:{id:"监控-系统"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#监控-系统"}},[s._v("#")]),s._v(" 监控&系统")]),s._v(" "),n("ul",[n("li",[s._v("docker stats")]),s._v(" "),n("li",[s._v("docker ps = docker container ls")]),s._v(" "),n("li",[s._v("docker system prune -a")]),s._v(" "),n("li",[s._v("docker system df")]),s._v(" "),n("li",[s._v("docker info")])]),s._v(" "),n("h2",{attrs:{id:"应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[s._v("#")]),s._v(" 应用")]),s._v(" "),n("ul",[n("li",[s._v("docker pull php:7.2-fpm")]),s._v(" "),n("li",[s._v("docker build . -f php-docker-file -t php:v-h5-game")])]),s._v(" "),n("h2",{attrs:{id:"目录权限问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#目录权限问题"}},[s._v("#")]),s._v(" 目录权限问题")]),s._v(" "),n("ul",[n("li",[s._v("目录都不必提前创建")]),s._v(" "),n("li",[s._v("默认都是root权限,因为docker使用了root启动")])]),s._v(" "),n("h2",{attrs:{id:"用户问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户问题"}},[s._v("#")]),s._v(" 用户问题")]),s._v(" "),n("ul",[n("li",[s._v("使用未预设的用户使用docker")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("使用docker exec -it 69f8942e7621 /bin/bash 进入\nI have no name!@69f8942e7621:/data$ id -g \n1003\nI have no name!@69f8942e7621:/data$ id -u \n1004\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("sudo chown -R 1004:1003 redis， docker-compose的user与该用户一直方能有权限")])]),s._v(" "),n("h2",{attrs:{id:"用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[s._v("#")]),s._v(" 用法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("docker run -it -u 1004:1003 -v /etc/localtime:/etc/localtime:ro -v /data/cuser00/var/log/redis:/logs -v /data/cuser00/var/redis:/data -v `pwd`/redis/redis.conf:/usr/local/etc/redis/redis.conf   redis:6.2.3  redis-server /usr/local/etc/redis/redis.conf  \n重启所有compose管理的所有容器（只重启已经启动的部分）\ndocker-compose  restart\n重启redis\ndocker-compose  restart  redis\ndocker-compose  stop redis  \ndocker-compose  start redis\ndocker-compose up redis  前台启动，看到调试信息\ndocker-compose up -d  redis 后台启动，与start类似(但是start是针对容器的)\ndocker-compose run/up -d redis\nrestart的时候不会重新生成新的容器，即使用新的docker-compose的配置；如果需要更新docker-compose中的配置信息，需要删除容器重新生成\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ul",[n("li",[s._v("使用非root用户运行 CURRENT_UID=$(id -u)😒(id -g) docker-compose up -d redis")]),s._v(" "),n("li",[s._v("docker ps")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("docker ps -q\n    f0be9144d264\n    44dc5b9702c4\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("停止所有的容器 docker stop $(docker ps -aq)")]),s._v(" "),n("li",[s._v("删除所有的容器 docker rm $(docker ps -aq)")]),s._v(" "),n("li",[s._v("删除所有的镜像 docker rmi $(docker images -q)")]),s._v(" "),n("li",[s._v("一条命令实现停用并删除容器 docker stop $(docker ps -q) & docker rm $(docker ps -aq)")]),s._v(" "),n("li",[s._v("docker login --username=wang70bin@163.com registry.cn-hangzhou.aliyuncs.com")]),s._v(" "),n("li",[s._v("docker login pull push")])]),s._v(" "),n("h2",{attrs:{id:"自由发挥command"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自由发挥command"}},[s._v("#")]),s._v(" 自由发挥command")]),s._v(" "),n("ul",[n("li",[s._v("两种格式形式")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("command: php /code/workerman/start.php start\n或者分行\ncommand: \n    - php \n    - /code/workerman/start.php \n    - start\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("例子 docker run -it -p 9999:9999 -p 9997:9997  -v /data/cuser00/www/h5/Lottery/:/code -v /data/cuser00/var/log/workerman:/logs  php-wm:1.0 php /code/workerman/start.php start")]),s._v(" "),n("li",[s._v("CURRENT_UID=0:0 docker-compose run --rm -p 9999:9999 -p 9997:9997 workerman (不指定port，端口不会对外起效)")]),s._v(" "),n("li",[s._v('docker run --name static_builder(指定容器名字) -d  -v /data/cuser00/sand/docker/jekins/static/run.sh:/static/run.sh  php-static:1.0.0 /bin/sh -c "while true; do echo hello world; sleep 1; done" 让某个配置型的容器一直运行')]),s._v(" "),n("li",[s._v("docker exec -it static_builder /bin/bash /static/run.sh hotfix_wb_docker_apply_v1 容器执行某个命令")]),s._v(" "),n("li",[s._v("可以从某一个中间层进入，比如 docker run -it "),n("strong",[s._v("91060a9c19f0")]),s._v(" /bin/bash")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Step 1/7 : FROM php:7.2-fpm\n ---\x3e 28f52b60203d\nStep 2/7 : RUN sed -i s@/deb.debian.org/@/mirrors.aliyun.com/@g /etc/apt/sources.list\n ---\x3e Using cache\n ---\x3e 10813dc262a8\nStep 3/7 : RUN apt-get update\n ---\x3e Using cache\n ---\x3e ff4bc648f240\nStep 4/7 : RUN apt-get install -y software-properties-common\n ---\x3e Using cache\n ---\x3e de9eb509f656\nStep 5/7 : RUN add-apt-repository ppa:deadsnakes/ppa\n ---\x3e Using cache\n ---\x3e 91060a9c19f0\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h2",{attrs:{id:"头大"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#头大"}},[s._v("#")]),s._v(" 头大")]),s._v(" "),n("ul",[n("li",[s._v('Primary script unknown" while reading response header from upstream，原来是旧的php-fpm没有关闭或者又被拉起，导致转到那个端口去了;而docker是不会检测端口的合法性的')]),s._v(" "),n("li")]),s._v(" "),n("h2",{attrs:{id:"实践建议"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实践建议"}},[s._v("#")]),s._v(" 实践建议")]),s._v(" "),n("ul",[n("li",[s._v("容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷(volumen)、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主(或者网络存储)发生读写，其性能和稳定性更高。（因为容器存储层会随着容器的消亡而消亡）")]),s._v(" "),n("li",[s._v("所以对于 CentOS/RHEL 的用户来说，在没有办法使用 UnionFS的情况下，一定要配置direct-lvm 给 devicemapper，无论是为了性能、稳定性还是空间利用率。")]),s._v(" "),n("li",[s._v("使用 docker commit 命令虽然可以比较直观的帮助理解镜像分层存储的概念，但是"),n("strong",[s._v("实际环境中并不会这样使用")]),s._v("。")]),s._v(" "),n("li",[s._v("很多人初学 Docker 制作出了很臃肿的镜像的原因之一，就是忘记了每一层构建的最后一定要清理掉无关文件。")]),s._v(" "),n("li",[s._v("容器目录不可以为相对路径")]),s._v(" "),n("li",[s._v("宿主机目录如果不存在，则会自动生成")]),s._v(" "),n("li",[s._v("*******************是不是所有的挂载目录都需要提前设置权限呢?")]),s._v(" "),n("li",[s._v("port只是做了一层端口转发，需要两面match才能够起效")]),s._v(" "),n("li",[s._v("docker的两种最顶层状态：需要指定命令，不需要指定命令 直接可以运行")]),s._v(" "),n("li",[s._v("docker停止态进去，run  -it imageId /bin/bash,运行态进去 exec -it containerId /bin/bash")]),s._v(" "),n("li",[n("strong",[s._v("docker里面的执行进程的用户是配置文件决定的")])]),s._v(" "),n("li",[s._v("权限： 启动用户(root、dockerGroup), 操作用户(配置文件指定)，生成文件用户(一定使用root权限生成，这时候如果指定某个用户操作目录会产生问题)")]),s._v(" "),n("li",[s._v("polkitd input问题： docker和host的权限是靠uid:gid来传递的，"),n("strong",[s._v("当docker里面使用mysql或者数据库的用户名创建文件的时候，host显示的时候可能对应到其他的用户名和组")])]),s._v(" "),n("li",[s._v("数据库创建的时候必须提前创建目录并且给予777的权限")]),s._v(" "),n("li",[s._v("ps aux 可以看到docker中启动的进程")]),s._v(" "),n("li",[s._v("dockerd --debug 可以看到一些调试信息，比如启动失败等")]),s._v(" "),n("li",[s._v("docker 是一种装置，将复杂的功能模式化，类似于一个功能脚本")]),s._v(" "),n("li",[s._v("Docker构建过程是"),n("strong",[s._v("完全非交互的")])]),s._v(" "),n("li",[s._v("除了dockerfile，还可以从/bash/bash中进入到容器中，然后一阵操作后，再将修改后的容器提交到镜像中")]),s._v(" "),n("li",[s._v("-it 相当于从docker中开启了一个terminal")]),s._v(" "),n("li",[s._v("docker的官方镜像大多基于debian，因为它是轻量的发行版。目前 Docker 官方已开始推荐使用 Alpine 替代之前的 Ubuntu 做为基础镜像环境")]),s._v(" "),n("li",[s._v("部署为可查看环境: apt-get update && apt-get install procps && apt-get install net-tools && apt-get install vim")]),s._v(" "),n("li",[s._v("使用阿里云的软件仓库 sed -i s@/deb.debian.org/@/mirrors.aliyun.com/@g /etc/apt/sources.list")]),s._v(" "),n("li",[s._v("apt-get install telnet")]),s._v(" "),n("li",[s._v("vim乱码，编辑~/.vimrc,添加以下内容")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("set nocompatible\nfiletype off\n\nsyntax on\nset tabstop=4\n\nset fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936\nset termencoding=utf-8\nset encoding=utf-8\n~                  \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])])])}),[],!1,null,null,null);e.default=r.exports}}]);