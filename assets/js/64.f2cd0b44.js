(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{638:function(v,e,i){"use strict";i.r(e);var a=i(26),_=Object(a.a)({},(function(){var v=this,e=v.$createElement,i=v._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h1",{attrs:{id:"设计"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#设计"}},[v._v("#")]),v._v(" 设计")]),v._v(" "),i("ul",[i("li",[v._v("MVC模式")])]),v._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[v._v("model认为是数据存储部分（可是在内存中或者数据库中）\nview 是显示的部分\ncontroller 控制部分看，可以认为是这个模型的入口\n")])]),v._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[v._v("1")]),i("br"),i("span",{staticClass:"line-number"},[v._v("2")]),i("br"),i("span",{staticClass:"line-number"},[v._v("3")]),i("br")])]),i("h2",{attrs:{id:"反面模式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#反面模式"}},[v._v("#")]),v._v(" 反面模式")]),v._v(" "),i("h3",{attrs:{id:"社会和组织结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#社会和组织结构"}},[v._v("#")]),v._v(" 社会和组织结构")]),v._v(" "),i("h4",{attrs:{id:"组织结构"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#组织结构"}},[v._v("#")]),v._v(" 组织结构")]),v._v(" "),i("ul",[i("li",[v._v("分析瘫痪（Analysis paralysis）：花费太多精力在项目的分析阶段")]),v._v(" "),i("li",[v._v("脚踏车棚（Bicycle shed）：对于一些不重要的事务花上不成比例的精力")]),v._v(" "),i("li",[v._v("超前沿技术‎（Bleeding edge，刀锋）：采用一些未经测试和/或尚不稳定的前沿技术来运营，从而导致成本超支、表现/性能不佳，和/或交付延期。")]),v._v(" "),i("li",[v._v("摇钱树（cash cow）：盈利的老产品通常会导致对新产品的自负")]),v._v(" "),i("li",[v._v("委员会设计（Design by committee）：很多人同时进行设计，却没有统一的看法")]),v._v(" "),i("li",[v._v("承诺升级（Escalation of commitment）：明知错了还不能收回之前的决定")]),v._v(" "),i("li",[v._v("目标管理（Management by objectives）：通过数字管理，过于关注非本质而或不易取得的数字指标")]),v._v(" "),i("li",[v._v("道德风险（Moral hazard）：不让做决定的人知道他的决定会带来什么结果")]),v._v(" "),i("li",[v._v("蘑菇管理（Mushroom management）：不通知或是错误地通知雇员信息。雇员像蘑菇一样在黑暗中吸取养分，自生自灭")]),v._v(" "),i("li",[v._v("海鸥式管理（Seagull management）：只有当出现问题的时候管理人员才会跟雇员进行接触和互动的管理模式。典型的场景就是，海鸥式的管理人员“飞”过来，嘁嘁喳喳，是人都批评一通，尔后“飞”走了！")]),v._v(" "),i("li",[v._v("烟囱式管理（Stovepipe or Silos，竖井式/发射井式/谷仓式管理）：组织结构是由若干彼此孤立的团队组成，并且整个组织结构的范围内，上下沟通交流能够有效进行，而水平/横向的则不然。结构上支持数据主要在上下方面的流动，却禁止跨部门的通信。")]),v._v(" "),i("li",[v._v("厂商陷阱（Vendor lock-in，供应商套牢，供应商陷阱，厂商泥潭）：使一个系统过于依赖于外部所提供的组件/部件。")])]),v._v(" "),i("h4",{attrs:{id:"项目管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#项目管理"}},[v._v("#")]),v._v(" 项目管理")]),v._v(" "),i("ul",[i("li",[v._v('死亡征途（Death march，死亡之旅）：除了CEO，每个人都知道这个项目会成为一场灾难，但是真相却被隐瞒下来，以免项目被立即取消。（尽管CEO通常知道并且仍然继续试图最大化利润。）然而，真相被隐藏起来，直到大限来临（"Big Bang"）。另一种定义：雇员由于不合理的deadline，被迫在深夜和周末加班。')]),v._v(" "),i("li",[v._v("团队思维（Groupthink）：在团队思维中，团队成员避免提出在一致观点之外的思维。")]),v._v(" "),i("li",[v._v("九九定律（Ninety-ninety rule）：当项目“几近完成”时，低估完成项目所需时间的倾向。")]),v._v(" "),i("li",[v._v("过度设计（Overengineering）：花费资源完成比实际需要的还要复杂的工程")]),v._v(" "),i("li",[v._v("障眼法（Smoke and mirrors）：展示还没实现的功能，就像它们已经实现了一样")])]),v._v(" "),i("h4",{attrs:{id:"分析方式"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分析方式"}},[v._v("#")]),v._v(" 分析方式")]),v._v(" "),i("ul",[i("li",[v._v("旁观冷漠（Bystander apathy）：一个需求或者设计是错的，注意到这一点的人却不指出，因为这影响的是其他人。")])]),v._v(" "),i("h3",{attrs:{id:"软件工程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#软件工程"}},[v._v("#")]),v._v(" 软件工程")]),v._v(" "),i("h4",{attrs:{id:"软件设计"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#软件设计"}},[v._v("#")]),v._v(" 软件设计")]),v._v(" "),i("ul",[i("li",[v._v("抽象倒置（Abstraction inversion）：不把用户需要的功能直接提供出来，导致他们要用更上层的函数来重复实现")]),v._v(" "),i("li",[v._v("用意不明（Ambiguous viewpoint）：给出一个模型（通常是面向对象分析与设计，面向对象分析与设计）却没有指出用意何在")]),v._v(" "),i("li",[v._v("大泥球（Big ball of mud）：没有清晰结构的系统")]),v._v(" "),i("li",[v._v("数据库式进程间通信（Database-as-IPC）：使用数据库进行进程间通信，而不使用更轻量级的合适的机制。或者说，对于常规的进程间通信，不是去采用轻量得多的合适机制，而是将数据库用作消息队列。")]),v._v(" "),i("li",[v._v("镀金（Gold plating）：在项目达到最高价值后还继续工作。")]),v._v(" "),i("li",[v._v("内部平台效应（Inner-platform effect）：系统可自定义的太多，以至于成为一个软件开发平台的蹩脚的复制品。")]),v._v(" "),i("li",[v._v("输入问题（Input kludge）：无法确定和实现对异常输入的处理")]),v._v(" "),i("li",[v._v("接口膨胀（Interface bloat）：把一个接口做得过于强大以至于极其难以实现")]),v._v(" "),i("li",[v._v("魔力按键（Magic pushbutton）：直接在接口的代码里实作功能，而不维持其抽象性。这可能导致软件的耦合性增加，弹性与可重复使用性下降。")]),v._v(" "),i("li",[v._v("竞争风险（Race hazard）：输出结果受到事件执行顺序和时机的影响，在多线程环境和分布式系统中可能发生")]),v._v(" "),i("li",[v._v("烟囱系统（Stovepipe system）：过度聚集数据和功能，忽视了与其他系统和模块的共享")])]),v._v(" "),i("h4",{attrs:{id:"面向对象设计"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#面向对象设计"}},[v._v("#")]),v._v(" 面向对象设计")]),v._v(" "),i("ul",[i("li",[v._v("贫血的域模型（Anemic Domain Model）：仅因为每个对象都要有属性和方法，而在使用域模型的时候没有加入非OOP的业务逻辑")]),v._v(" "),i("li",[v._v("调用父类（Call super）：需要子类调用父类被重定义的方法")]),v._v(" "),i("li",[v._v("圆还是椭圆问题（Circle-ellipse problem）：基于变量的子类化关系进行子类化")]),v._v(" "),i("li",[v._v("循环依赖（Circular dependency）：在对象或软件模块中，直接或间接引入循环依赖。")]),v._v(" "),i("li",[v._v("常量接口（Constant interface）：使用接口定义常量")]),v._v(" "),i("li",[v._v("上帝对象（God object）：在设计的单一部分（某个类）集中了过多的功能")]),v._v(" "),i("li",[v._v("对象粪池（Object cesspool）：复用那些不满足复用条件的对象。对象池是一种管理对象的方法，在重复使用对象前，需要针对对象进行初始化，以避免上次使用后的状态等数据影响下次的使用")]),v._v(" "),i("li",[v._v("不羁的对象（Object orgy）：没有成功封装对象，外部可以不受限制地访问它的内部")]),v._v(" "),i("li",[v._v("幽灵（Poltergeists）：指这样一些对象，它们唯一的作用就是把信息传给其它对象")]),v._v(" "),i("li",[v._v("顺序耦合（Sequential coupling）：指这样一些对象，它们的方法必须要按某种特定顺序调用")]),v._v(" "),i("li",[v._v("悠悠问题（Yo-yo problem）：一个结构（例如继承）因为过度碎片化而变得难于理解")])]),v._v(" "),i("h4",{attrs:{id:"编程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#编程"}},[v._v("#")]),v._v(" 编程")]),v._v(" "),i("ul",[i("li",[v._v("偶然复杂度（Accidental complexity）：向一个方案中引入不必要的复杂度")]),v._v(" "),i("li",[v._v("远隔作用（Action at distance）：意料之外的在系统分离的部分之间交互")]),v._v(" "),i("li",[v._v("船锚（Boat anchor）：在系统中保留无用的部分")]),v._v(" "),i("li",[v._v("忙等待（Busy waiting）：在等待的时候不断占用CPU，通常是因为采用了重复检查而不是适当的消息机制")]),v._v(" "),i("li",[v._v("缓存失败（Caching failure）：错误被修正后忘记把错误标志复位")]),v._v(" "),i("li",[v._v("拜物编程（Cargo cult programming）：由于对模式的盲目崇拜，在不理解的情况下就使用模式和方法，企图得到好的结果")]),v._v(" "),i("li",[v._v("靠异常编程（Coding by exception）：当有特例被发现时才添加新代码去解决")]),v._v(" "),i("li",[v._v("隐藏错误（Error hiding）：在显示给用户之前捕捉到错误信息，要么什么都不显示，要么显示无意义的信息")]),v._v(" "),i("li",[v._v("硬编码（Hard code）：将对系统环境的假设写入实现中")]),v._v(" "),i("li",[v._v("熔岩流（Lava flow）：保留不想要的（冗余的或是低质量的）代码，仅因为除去这些代码的代价太高或是会带来不可预期的结果")]),v._v(" "),i("li",[v._v("循环-switch序列（Loop-switch sequence）在循环结构中使用switch语句来编写连续步骤")]),v._v(" "),i("li",[v._v("魔术数字（Magic numbers）：在算法里直接使用数字，而不解释含义")]),v._v(" "),i("li",[v._v("魔幻字符串（Magic strings）：直接在代码里使用常量字符串，例如用来比较，或是作为事件代码")]),v._v(" "),i("li",[v._v("自我复制（Repeating yourself）：通过不断复制已有代码的模式或代码段进行编码；而非采用once and only once（抽取原则）")]),v._v(" "),i("li",[v._v("软代码（Soft code）：在配置文件里保存业务逻辑而不是在代码中")]),v._v(" "),i("li",[v._v("面条代码（Spaghetti code）：指那些结构上完全不可理解的系统，尤其是因为误用代码结构")]),v._v(" "),i("li",[v._v("霰弹枪手术（Shotgun surgery）：开发人员一次性在一个多个实现的代码基中增加功能")])]),v._v(" "),i("h4",{attrs:{id:"方法论"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#方法论"}},[v._v("#")]),v._v(" 方法论")]),v._v(" "),i("ul",[i("li",[v._v("拷贝粘贴编程（Copy and paste programming）：拷贝（然后修改）现有的代码而不是构造通用的解决方案")]),v._v(" "),i("li",[v._v("黄金大锤（Golden hammer）：认为自己最喜欢的解决方案是到处通用的（参见：银弹）")]),v._v(" "),i("li",[v._v("不可能因素（Improbability factor）：认为已知的错误不可能发生")]),v._v(" "),i("li",[v._v("非我所创（Not invented here）：拒绝使用组织外的主意或方案，但这也可能是出于版权等原因")]),v._v(" "),i("li",[v._v("这里发明的（invented here）：拒绝组织内部实现的创新或解决方案，通常因为对成员没有信心")]),v._v(" "),i("li",[v._v("不成熟的优化（Premature optimization）：在编码的早期追求代码的效率，牺牲了好的设计、可维护性、有时甚至是现实世界的效率")]),v._v(" "),i("li",[v._v("转换编程法（Programming by permutation）：也称巧合编程，试图通过连续修改代码再看是否工作的方式来解决问题")]),v._v(" "),i("li",[v._v("重新发明方的轮子（Reinventing the square wheel）：已经有一个很好的方案了，又再搞一个烂方案来替代它")]),v._v(" "),i("li",[v._v("银弹（Silver bullet）：认为自己最喜欢的技术方案能解决一个更大的问题")]),v._v(" "),i("li",[v._v("测试人员驱动开发（Tester driven development）：需求来自bug报告的软件工程")])]),v._v(" "),i("h4",{attrs:{id:"配置管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#配置管理"}},[v._v("#")]),v._v(" 配置管理")]),v._v(" "),i("ul",[i("li",[v._v("依赖地狱（Dependency hell）：所依赖产品的版本所导致的问题")]),v._v(" "),i("li",[v._v("DLL地狱（DLL hell）：不同版本DLL所带来的问题，包括DLL可见性和多版本问题，在微软的Windows上尤为突出")]),v._v(" "),i("li",[v._v("扩展冲突（Extension conflict）：苹果系统在Mac OS X版本之前的不同扩展的问题")]),v._v(" "),i("li",[v._v("JAR地狱（JAR hell）：JAR文件不同版本或路径带来的问题，通常是由于不懂类加载模型导致的")])])])}),[],!1,null,null,null);e.default=_.exports}}]);