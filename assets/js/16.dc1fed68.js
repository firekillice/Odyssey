(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{450:function(s,n,a){s.exports=a.p+"assets/img/iteration-line.f7f31cad.png"},451:function(s,n,a){s.exports=a.p+"assets/img/recursion-tree.b3a24c2f.png"},542:function(s,n,a){"use strict";a.r(n);var e=a(36),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"聊一下递归"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#聊一下递归"}},[s._v("#")]),s._v(" 聊一下递归")]),s._v(" "),e("p",[s._v("递归对很多程序员同学来说，可能是一个"),e("code",[s._v("熟悉而又陌生")]),s._v("的概念，因为上学的时候都会讲一个斐波那契数列，这是一个很好的递归的例子，可是毕业后大多数时候用的是循环迭代，递归用的场景比较少。笔者就是想擦拭一下递归这个概念，让它清晰起来。")]),s._v(" "),e("h2",{attrs:{id:"递归是个啥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#递归是个啥"}},[s._v("#")]),s._v(" 递归是个啥")]),s._v(" "),e("ul",[e("li",[s._v("Wiki上的定义是,"),e("code",[s._v("在数学与计算机科学中，是指在函数的定义中使用函数自身的方法")])]),s._v(" "),e("li",[s._v("这个定义比较干燥，我们把它展开说")])]),s._v(" "),e("h2",{attrs:{id:"白话说一下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#白话说一下"}},[s._v("#")]),s._v(" 白话说一下")]),s._v(" "),e("ol",[e("li",[s._v("你站在两个镜子中间，你在每个镜子中能看到几个自己呢")]),s._v(" "),e("li",[s._v("俄罗斯套娃")]),s._v(" "),e("li",[s._v("最近听樊登读书，经常说的一个词 "),e("code",[s._v("自我引用")]),s._v("，今天的表現都是前一天的結果\n这些都可以认为是递归的例子，抽象的说，就是"),e("code",[s._v("一个模式引用了同样的模式")]),s._v("。")])]),s._v(" "),e("h2",{attrs:{id:"在计算机领域它是怎样的呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在计算机领域它是怎样的呢"}},[s._v("#")]),s._v(" 在计算机领域它是怎样的呢")]),s._v(" "),e("ol",[e("li",[s._v("给它祛魅，实现上就是"),e("code",[s._v("一个函数调用自己")]),s._v("，底层汇编使用CALL指令，CPU才不管调用的是啥，只管往前跑。")]),s._v(" "),e("li",[s._v("计算机中并没有一个"),e("code",[s._v("递归")]),s._v("的关键字，"),e("code",[s._v("递归只是一种思想")]),s._v("，一种解决问题的"),e("code",[s._v("方法论")]),s._v("，但是几乎所有的语言都支持函数自己调用自己，也就是了说提供递归实现的基础。")]),s._v(" "),e("li",[s._v("计算机中需要递归的场景都可以转为迭代，也就是说在资源允许的情况下(栈不溢出)，迭代和递归是可以相互转换的，但是如果想让编译器自动实现转化，就需要实现"),e("code",[s._v("尾递归")])])]),s._v(" "),e("ul",[e("li",[s._v("N个1相加(什么玩意，使用循环不好么)")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("int f(int n) => n > 0 ? f(n - 1) + 1 : 0;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("整数数组的数字之和(什么玩意，使用循环不好么+1)")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("int Sum(int[] array, int length) => (length > 1 ? Sum(array, length - 1) : array[0]) + array[length - 1];\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"它为什么重要"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#它为什么重要"}},[s._v("#")]),s._v(" 它为什么重要")]),s._v(" "),e("p",[s._v("它能够解决一下较为复杂的问题")]),s._v(" "),e("h3",{attrs:{id:"二叉树遍历-对比一下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树遍历-对比一下"}},[s._v("#")]),s._v(" 二叉树遍历，对比一下")]),s._v(" "),e("ul",[e("li",[s._v("使用迭代的方式，大概会写成下面的样子")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public void TraverseNode()\n{\n  var stack = new MyStack<BinaryTreeNode>();\n    void pushLeft(BinaryTreeNode node)\n    {\n        var current = node;\n        stack.Push(current);\n\n        while (current.Left != null)\n        {\n            stack.Push(current.Left);\n            current = current.Left;\n        }\n    }\n\n    if (Root != null)\n    {\n        pushLeft(Root);\n    }\n\n    while (!stack.IsEmtpy())\n    {\n        var current = stack.Pop();\n        Console.WriteLine(current.Value);\n        if (current.Right != null)\n        {\n            pushLeft(current.Right);\n        }\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br")])]),e("ul",[e("li",[s._v("使用递归的方式")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("void TraverseNode(BinaryTreeNode parent)\n{\n    if (parent.Left != null)\n    {\n        TraverseNode(parent.Left);\n    }\n    Console.WriteLine(parent.Value);\n    if (parent.Right != null)\n    {\n        TraverseNode(parent.Right);\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("wtf, 太清爽了吧，其实说白了，这种遍历需要一个"),e("code",[s._v("栈")]),s._v("来存储路径，只不过是第一种方式是"),e("code",[s._v("程序员自己维护")]),s._v("，第二种是通过"),e("code",[s._v("递归的方式让系统去维护")]),s._v("。")]),s._v(" "),e("h3",{attrs:{id:"二分查找看一下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二分查找看一下"}},[s._v("#")]),s._v(" 二分查找看一下")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("int search(int[] orderedArray, int start, int end, int value)\n{\n    if (start == end)\n    {\n        if (orderedArray[start] == value)\n        {\n            return start;\n        }\n        else\n        {\n            return -1;\n        }\n    }\n\n    var middle = (end + start) / 2;\n    if (orderedArray[middle] > value)\n    {\n        return search(orderedArray, start, middle - 1, value);\n    }\n    else if (orderedArray[middle] < value)\n    {\n        return search(orderedArray, middle + 1, end, value);\n    }\n    else\n    {\n        return middle;\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("p",[s._v("上面的二分换成迭代试试，呵呵。")]),s._v(" "),e("h2",{attrs:{id:"什么场景下需要用到呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么场景下需要用到呢"}},[s._v("#")]),s._v(" 什么场景下需要用到呢？")]),s._v(" "),e("ul",[e("li",[s._v("其实计算机中使用迭代把递归能干活的抢走了，或者说能用循环的场景就用循环了。循环是一种"),e("code",[s._v("线性处理模式")]),s._v("，\n"),e("img",{attrs:{src:a(450),alt:"iteration-line"}}),s._v("，这种模式能解决大多数的问题，因为迭代或者说循环更容易理解一下，想想一下，如果向一年级小朋友介绍循环，估计三四句话小朋友就明白了，ok，我们讲递归，全体小朋友瞪大了眼睛。")]),s._v(" "),e("li",[s._v("我的理解是，"),e("code",[s._v("树形")]),s._v("的问题可以考虑使用递归处理，怎么说呢，如下图，我称它为递归树,很多复杂问题可以分解为相似的问题，分解若干次后，"),e("code",[s._v("在终止条件处有明确的解")]),s._v("。\n"),e("img",{attrs:{src:a(451),alt:"recursion-tree"}})]),s._v(" "),e("li",[s._v("有了递归，那什么时候用递归，什么时候用迭代呢？我个人觉得就是，能用迭代就用迭代，用迭代明显变的复杂的场景就用递归，关键在于问题的复杂度，我猜没人愿意计算N个1之和写成"),e("code",[s._v("int f(int n) => n > 0 ? f(n - 1) + 1 : 0;")]),s._v("这个样子吧，也没人愿意使用一个栈来处理二叉树的遍历问题。")]),s._v(" "),e("li",[s._v("切记，递归一定有一个出口，也就是终止条件，不然递归会"),e("code",[s._v("进入无尽的黑渊")])]),s._v(" "),e("li",[s._v("使用递归重要的是什么，找到递归模式，一个是找到"),e("code",[s._v("子问题")]),s._v("，一个是找到"),e("code",[s._v("出口")]),s._v("。")])]),s._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),e("p",[s._v("递归是一种解决问题的思想，计算机中就是函数调用自己，但是需要有个出口，不然就闷死了。递归什么时候用呢，在合适的复杂度的时候使用。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("微信公众号为“吹风的坚果”，欢迎关注，定期更新优质的计算机文章。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);