(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{377:function(s,t,n){s.exports=n.p+"assets/img/v2-fab8c2f3100c8d912edec69a01443b13_720w.fab8c2f3.jpg"},378:function(s,t,n){s.exports=n.p+"assets/img/20200910215718.4194eec5.png"},628:function(s,t,n){"use strict";n.r(t);var a=n(26),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"python"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python"}},[s._v("#")]),s._v(" Python")]),s._v(" "),a("h2",{attrs:{id:"types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[s._v("#")]),s._v(" types")]),s._v(" "),a("ul",[a("li",[s._v("C 语言编写实现的 Python，又称为 CPython。平时我们所讨论的 Python，指的其实就是 CPython")]),s._v(" "),a("li",[s._v("用 Java 语言实现的 Python 称为 JPython")]),s._v(" "),a("li",[s._v("用 .net 实现的 Python 称为 IronPython")]),s._v(" "),a("li",[s._v("其他语言写的python的原因")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("在嵌入式系统中运行 Python 代码。\n与运行框架（如 Java 或 .NET）或其他语言做代码集成。\n在 Web 浏览器中运行 Python 代码。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("PyPy 可能是最令人兴奋的 Python 实现，因为其目标就是将 Python 重写为 Python。在 PyPy 中，Python 解释器本身是用 Python 编写的。")]),s._v(" "),a("li",[s._v("执行过程 "),a("img",{attrs:{src:n(377),alt:"image"}})]),s._v(" "),a("li",[s._v("Python虚拟机（VM）是一个单独的程序，在CPython编译器生成字节码后才会出现。 它实际上是对物理CPU的模拟-它具有软件定义的栈，指令指针(EIP)和其他功能。 虽然，其他虚拟机可能还有很多其他组件，例如寄存器等，但是CPython VM完全基于栈数据结构，这就是为什么它通常被称为“基于栈”的虚拟机的原因。")]),s._v(" "),a("li",[s._v("Python解释器可以直接且对最终用户透明地运行编译的C代码。必须将C代码编译到称为扩展模块的特定类型的动态库中。这些模块是成熟的Python模块，但是其中的代码已由标准C编译器预编译为机器代码。")]),s._v(" "),a("li",[s._v("Python的加载so动态链接库就是C的dlopen")])]),s._v(" "),a("h2",{attrs:{id:"disassemble"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disassemble"}},[s._v("#")]),s._v(" disassemble")]),s._v(" "),a("ul",[a("li",[s._v("test code")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#!/usr/bin/env python3\n# encoding: utf-8\n\ndef f(a, b):\n\treturn a + b\n\nif __name__ == '__main__':\n    import dis\n    #dis.show_code(f)\n    dis.dis(f)\n-------------------------------------\n  5           0 LOAD_FAST                0 (a)\n              2 LOAD_FAST                1 (b)\n              4 BINARY_ADD\n              6 RETURN_VALUE\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"ast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ast"}},[s._v("#")]),s._v(" ast")]),s._v(" "),a("ul",[a("li",[s._v("visualize: https://vpyast.appspot.com/")]),s._v(" "),a("li",[s._v("例子")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("st='def foo():\\n    print(\"hello\")'\nimport ast\nprint(ast.dump(ast.parse(st)))\n-------------------------------------------------\n > python ./test.py \nModule(body=[FunctionDef(name='foo', args=arguments(args=[], vararg=None, kwarg=None, defaults=[]), body=[Print(dest=None, values=[Str(s='hello')], nl=True)], decorator_list=[])])\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("img",{attrs:{src:n(378),alt:"image"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);