(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{621:function(a,s,n){"use strict";n.r(s);var t=n(26),e=Object(t.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"c"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c"}},[a._v("#")]),a._v(" c++")]),a._v(" "),n("ul",[n("li",[a._v("出生轨迹 Basic CPL => BCPL => B => C => C++")]),a._v(" "),n("li",[a._v("C++的4个次语言： C、 OC++、Template C++、STL，C++并不是一个带有一组守则的一体语言，而是由4个次语言组成的联邦语言，每个次语言都有自己的规约。")])]),a._v(" "),n("h2",{attrs:{id:"c-11"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#c-11"}},[a._v("#")]),a._v(" c++11")]),a._v(" "),n("ul",[n("li",[a._v("GCC 4.8.1是第一个全面支持c++11的gcc版本，也就是C++0草案的正式版")]),a._v(" "),n("li",[a._v("auto类型推导，将原有的auto关键字赋予了新的含义；会在"),n("strong",[a._v("编译期间")]),a._v("确定类型; 根据变量的初始值来推导出变量类型的，如果不初始化，变量的类型也就无法推导。")]),a._v(" "),n("li",[a._v("decltype: 使用表达式推断出一个类型")]),a._v(" "),n("li",[a._v("返回类型后置（trailing-return-type，又称跟踪返回类型）语法，将 decltype 和 auto 结合起来完成返回值类型的推导")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("int& foo(int& i);\nfloat foo(float& f);\ntemplate <typename T>\nauto func(T& val) -> decltype(foo(val))\n{\n    return foo(val);\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("ul",[n("li",[a._v("统一初始化（uniform initialization）")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("int x3 = {27};\nint x3{27};\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("ul",[n("li",[a._v("在C++11中可以取地址的、有名字的就是左值，反之，不能取地址的、没有名字的就是右值（将亡值或纯右值）")]),a._v(" "),n("li",[a._v("右值引用，下面的例子中，a+1是一个寄存器中，没有内存地址可以寻址")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("int getdata(int &&num)\n{\n    cout << num;\n    num += 10;\n    return num;\n}\nvoid main()\n{\n    int a = 5;\n    cout << getdata(a + 1) << endl;\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br")])]),n("ul",[n("li",[a._v("构造析构")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("移动构造\n\n普通函数的问题： std::move 将左值强制转换为右值\n模板中的问题: 完美转发, forward \n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br")])]),n("ul",[n("li",[a._v("为了加强模板的使用，引入了using关键字，但是使用赋值的形式，来替换typedef")]),a._v(" "),n("li",[a._v("引入默认模板参数")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("template <typename T = int>  // error in C++98/03: default template arguments\nvoid func()\n{\n    // ...\n}\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br")])]),n("ul",[n("li",[a._v("for")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('for (declaration : expression){\n    //循环体\n}\n---------------------------------------------\nfor (int num : {1, 2, 3, 4, 5}) {\n        cout << num << " ";\n    }\n---------------------------------------------\n  vector<char>myvector(arc, arc + 23);\n    //for循环遍历 vector 容器\n    for (auto ch : myvector) {\n        cout << ch;\n    }\n---------------------------------------------\n    char arc[] = "http://c.biancheng.net/cplus/11/";\n    //for循环遍历普通数组\n    for (char ch : arc) {\n        cout << ch;\n    }\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br")])]),n("ul",[n("li",[a._v("constexpr 常量表达式提示编译器在编译期间将值得出结果；这样做的目的就是，尽量多的完成可以在编译期间做的事情。")]),a._v(" "),n("li",[a._v("long long 龙龙终于可以用了")]),a._v(" "),n("li",[a._v("nullptr")]),a._v(" "),n("li",[a._v("shared_ptr，共享模式；unique_ptr，独享模式； weak_ptr观察者模式")]),a._v(" "),n("li",[a._v("emplace, emplace_back, emplace_front 对应的是  push_front, push, push_back")])]),a._v(" "),n("h2",{attrs:{id:"多线程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多线程"}},[a._v("#")]),a._v(" 多线程")]),a._v(" "),n("ul",[n("li",[a._v("未定义的行为是C++中最黑暗的角落，比如某些多线程的访问结果")]),a._v(" "),n("li",[a._v("两种方式： 锁和原子操作")]),a._v(" "),n("li",[a._v("引入原子类型和线程类，将线程的操作对象化")])]),a._v(" "),n("h2",{attrs:{id:"理解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#理解"}},[a._v("#")]),a._v(" 理解")]),a._v(" "),n("ul",[n("li",[a._v("auto的优化更多是为了弥补模板带来的冗繁")]),a._v(" "),n("li",[a._v("移动构造是为了解决构造的构造、析构，不像脚本语言的有引用技术和COW等")]),a._v(" "),n("li",[a._v("整体来看c++11的修改，重点解决了拷贝构造问题，函数的灵活性问题，模板的冗繁问题")])]),a._v(" "),n("h2",{attrs:{id:"深深的误解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#深深的误解"}},[a._v("#")]),a._v(" 深深的误解")]),a._v(" "),n("ul",[n("li",[a._v("lvalue, rvalue，一直认为是左值、右值的意思，应该是最初的翻译者给误导了。 正解是，lvalue = locator value(“l-value” refers to memory location which identifies an object. 指向一个目标的地址);  r-value” refers to data value that is stored at some address in memory(比lvalue缺少了一层，直接就是某个地址)")])]),a._v(" "),n("h2",{attrs:{id:"roadmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#roadmap"}},[a._v("#")]),a._v(" roadmap")]),a._v(" "),n("ul",[n("li",[a._v("c++ 98(经典版本) -> c++03 -> c++11(颠覆性的版本) -> c++14 -> c++17 -> c++20")]),a._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/AnthonyCalandra/modern-cpp-features",target:"_blank",rel:"noopener noreferrer"}},[a._v("feature-list-of-different-version"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);