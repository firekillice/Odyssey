(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{363:function(a,t,s){a.exports=s.p+"assets/img/20200914220751.5a52b134.png"},364:function(a,t,s){a.exports=s.p+"assets/img/20200914220848.6d80301c.png"},365:function(a,t,s){a.exports=s.p+"assets/img/20200914220912.edd55cda.png"},618:function(a,t,s){"use strict";s.r(t);var e=s(26),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h3",{attrs:{id:"idempotence-幂等性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#idempotence-幂等性"}},[a._v("#")]),a._v(" Idempotence，幂等性")]),a._v(" "),e("ul",[e("li",[a._v('Methods can also have the property of "idempotence" in that (aside from error or expiration issues) the side-effects of N > 0 identical requests is the same as for a single request.')])]),a._v(" "),e("h2",{attrs:{id:"struct-array-pipe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#struct-array-pipe"}},[a._v("#")]),a._v(" struct array pipe")]),a._v(" "),e("ul",[e("li",[a._v("聚合数据结构意味着抽象能力的变强，对底层数据的操控能力变强，就像宗教的出现，将人的各种禁忌给集合了起来，形成了一个上层的概念")]),a._v(" "),e("li",[a._v("不同的类型是为了解决具体的问题而出现的，比如典型的cobol侧重于struct结构化的能力"),e("img",{attrs:{src:s(363),alt:"image"}}),a._v("，lisp使用大量指针来串联起来所有的数据"),e("img",{attrs:{src:s(364),alt:"image"}}),a._v(", fortran的使用侧重使用数组 "),e("img",{attrs:{src:s(365),alt:"image"}}),a._v("，磁带内存模型则使用pipe")]),a._v(" "),e("li",[a._v("pipe提供的是一种单向性，对某些算法来说就足够了，比如迭代器、channel")]),a._v(" "),e("li",[a._v("不同的语言侧重使用不同的结构去解决具体的问题")]),a._v(" "),e("li",[a._v("而通用语言则尝试将所有场景都结合进来，形成通用的编程语言")])]),a._v(" "),e("h2",{attrs:{id:"什么是编程语言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是编程语言"}},[a._v("#")]),a._v(" 什么是编程语言")]),a._v(" "),e("ul",[e("li",[a._v("将人的想法使用它所采用的的数据结构和编程范式表达出来，然后交给计算机")]),a._v(" "),e("li",[a._v("不同的编程语言，提供的锅碗瓢盆是不一样的，做出来的饭是不同的，但是都可以吃，都可以入口(喂入CPU中)")])]),a._v(" "),e("h2",{attrs:{id:"解释型-vs-编译型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解释型-vs-编译型"}},[a._v("#")]),a._v(" 解释型 vs 编译型")]),a._v(" "),e("ul",[e("li",[a._v("解释性语言是指需要一个解释器把代码解释给CPU")]),a._v(" "),e("li",[a._v("编译型：直接交给CPU可执行的机器代码")])]),a._v(" "),e("h2",{attrs:{id:"命令式语言-imperative-vs-声明式语言-declarative"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令式语言-imperative-vs-声明式语言-declarative"}},[a._v("#")]),a._v(" 命令式语言(Imperative) vs 声明式语言(Declarative)")]),a._v(" "),e("ul",[e("li",[a._v("命令式编程（Imperative）：详细的命令机器怎么（How）去处理一件事情以达到你想要的结果（What），比如常见的C、C#、Java等语言")]),a._v(" "),e("li",[a._v("声明式编程（ Declarative）：只告诉你想要的结果（What），机器自己摸索过程（How），比如"),e("strong",[a._v("SQL")])])]),a._v(" "),e("h2",{attrs:{id:"编程范式-programming-paradigm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编程范式-programming-paradigm"}},[a._v("#")]),a._v(" 编程范式(Programming paradigm)")]),a._v(" "),e("ul",[e("li",[a._v("编程范型提供了（同时决定了）程序员对程序执行的看法。编程范型和编程语言之间的关系可能十分复杂，由于一个编程语言可以支持多种范型。C++设计时，支持过程化编程、面向对象编程以及泛型编程。")]),a._v(" "),e("li",[a._v("函数式编程(泛函编程), 函数编程语言最重要的基础是λ演算（lambda calculus）")]),a._v(" "),e("li",[a._v("过程式编程")]),a._v(" "),e("li",[a._v("面向对象编程")]),a._v(" "),e("li",[a._v("指令式编程")]),a._v(" "),e("li",[a._v("声明式编程")]),a._v(" "),e("li",[a._v("结构化编程（Structured programming）,它采用子程序、块结构、for循环以及while循环等结构")])]),a._v(" "),e("h2",{attrs:{id:"语法【调料】"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法【调料】"}},[a._v("#")]),a._v(" 语法【调料】")]),a._v(" "),e("h3",{attrs:{id:"语法糖"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法糖"}},[a._v("#")]),a._v(" 语法糖")]),a._v(" "),e("ul",[e("li",[a._v("语法糖（英语：Syntactic sugar）是由英国计算机科学家彼得·兰丁发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能没有影响，但是更方便程序员使用。语法糖让程序更加简洁，有更高的可读性。")]),a._v(" "),e("li",[a._v("所以我觉得λ表达式就是语法糖")]),a._v(" "),e("li",[a._v("糖： 增加程序猿与语言的粘性，小朋友，叔叔给你糖跟我走吧")])]),a._v(" "),e("h3",{attrs:{id:"语法盐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法盐"}},[a._v("#")]),a._v(" 语法盐")]),a._v(" "),e("ul",[e("li",[a._v("语法盐（英语：syntactic salt）是指在计算机语言中为了降低程序员撰写出不良代码的设计，但其中仍会有潜藏错误存在的可能。")]),a._v(" "),e("li",[a._v("C语言或C++语言中Switch指令的case中若不加break编译器并不会产生错误消息，部分程序员认为宣告变量类型也是语法盐的一种。")])]),a._v(" "),e("h2",{attrs:{id:"形式语言的互通"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#形式语言的互通"}},[a._v("#")]),a._v(" 形式语言的互通")]),a._v(" "),e("ul",[e("li",[a._v("我们学习的各种语言，也许C、Java的数学表达方式更适合正常的思维方式")]),a._v(" "),e("li",[a._v("lambda演算的语法将一些表达式定义为有效的lambda演算式，而某一些表达式无效，就像C编程语言中有些字符串有效，有些则不是。有效的lambda演算式称为“lambda项”")]),a._v(" "),e("li",[a._v("也许lambda演算式的表达方式更适合西方人的思维习惯，感受一下，有种肉眼语法树的赶脚，所以现代语言的发展，编译器功不可没")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("(define (cons x y)\n  (lambda (m) (m x y)))\n\n(define (car z)\n  (z (lambda (p q) p)))\n\n(define (cdr z)\n  (z (lambda (p q) q)))\n\n(define-syntax let\n  (syntax-rules ()\n    ((let ((var expr) ...) body ...)\n      ((lambda (var ...) body ...) expr ...))))\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br")])]),e("h2",{attrs:{id:"语言-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语言-协议"}},[a._v("#")]),a._v(" 语言 & 协议")]),a._v(" "),e("ul",[e("li",[a._v("语言是一个系统，是为了解决某个问题而产生的一套规则。比如html是界面定义语言，包括word文档内部，也有一套规则和描述方式。")]),a._v(" "),e("li",[a._v("协议可以看做是数据的沟通方式，也就是协议。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);